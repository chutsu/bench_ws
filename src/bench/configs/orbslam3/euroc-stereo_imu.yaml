%YAML:1.0

#--------------------------------------------------------------------------------------------
# Camera Parameters. Adjust them!
#--------------------------------------------------------------------------------------------
Camera.type: "PinHole"

# Camera calibration and distortion parameters (OpenCV) (equal for both cameras after stereo rectification)
# euroc
Camera.fx: 435.2046959714599
Camera.fy: 435.2046959714599
Camera.cx: 367.4517211914062
Camera.cy: 252.2008514404297

# # kalibr
# Camera.fx: 435.62391075
# Camera.fy: 435.62391075
# Camera.cx: 368.91822433
# Camera.cy: 252.45542908

# # autocal
# Camera.fx: 434.66482215
# Camera.fy: 434.66482215
# Camera.cx: 324.69445801
# Camera.cy: 252.39799881

Camera.k1: 0.0
Camera.k2: 0.0
Camera.p1: 0.0
Camera.p2: 0.0

Camera.width: 752
Camera.height: 480

# Camera frames per second
Camera.fps: 20.0

# stereo baseline times fx
Camera.bf: 47.90639384423901

# Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)
Camera.RGB: 1

# Close/Far threshold. Baseline times.
ThDepth: 35.0 # 35

# Transformation from camera 0 to body-frame (imu)
Tbc: !!opencv-matrix
   rows: 4
   cols: 4
   dt: f
   # euroc
   data: [0.0148655429818, -0.999880929698, 0.00414029679422, -0.0216401454975,
         0.999557249008, 0.0149672133247, 0.025715529948, -0.064676986768,
        -0.0257744366974, 0.00375618835797, 0.999660727178, 0.00981073058949,
         0.0, 0.0, 0.0, 1.0]
   # autocal
   # data: [0.0150978375346138, -0.999878429084474, 0.00389645394452559, -0.0164955290793582,
   #        0.999644228600544, 0.0151797666729295, 0.0219315049501352, -0.0675743864860987,
   #        -0.0219879859787293, 0.00356394939902611, 0.999751882587515, 0.00565949229200543,
   #        0, 0, 0, 1]
   # kalibr
   # data: [ 0.0149665 , -0.99988499,  0.00245241, -0.01692765,
   #         0.99966993,  0.01501441,  0.02084691, -0.06835317,
   #        -0.02088133,  0.00213959,  0.99977967,  0.00392727,
   #         0.0       ,  0.0       ,  0.0       ,  1.0        ]

# IMU noise
IMU.NoiseGyro: 1.7e-04 # 1.6968e-04
IMU.NoiseAcc: 2.0e-03 # 2.0000e-3
IMU.GyroWalk: 1.9393e-05
IMU.AccWalk: 3.e-03 # 3.0000e-3
IMU.Frequency: 200

#--------------------------------------------------------------------------------------------
# Stereo Rectification. Only if you need to pre-rectify the images.
# Camera.fx, .fy, etc must be the same as in LEFT.P
#--------------------------------------------------------------------------------------------

LEFT.height: 480
LEFT.width: 752
LEFT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   # euroc
   data:[-0.28340811, 0.07395907, 0.00019359, 1.76187114e-05, 0.0]
   # kalibr
   # data: [-0.287330481247, 0.0775960964701, 0.000302090256271, 4.76633982269e-05, 0]

LEFT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   # euroc
   data: [458.654, 0.0, 367.215, 0.0, 457.296, 248.375, 0.0, 0.0, 1.0]
   # kalibr
   # data: [459.014531182, 0.0, 366.357149029, 0.0, 457.706195745, 248.624598955, 0.0, 0.0, 1.0]

LEFT.R:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   # euroc
   data: [0.999966347530033, -0.001422739138722922, 0.008079580483432283,
          0.001365741834644127, 0.9999741760894847, 0.007055629199258132,
          -0.008089410156878961, -0.007044357138835809, 0.9999424675829176]
   # autocal
   # data: [0.99788368, 0.00441267, 0.06487442,
   #        -0.00489915, 0.99996105, 0.00734154,
   #        -0.06483950, -0.00764383, 0.99786643]
   # kalibr
   # data: [0.99998574, -0.00157912 , 0.00510155, 0.00154415, 0.99997534, 0.00685068, -0.00511224, -0.0068427, 0.99996352]

LEFT.Rf:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: f
   # euroc
   data: [0.999966347530033, -0.001422739138722922, 0.008079580483432283,
          0.001365741834644127, 0.9999741760894847, 0.007055629199258132,
          -0.008089410156878961, -0.007044357138835809, 0.9999424675829176]
   # autocal
   # data: [0.99788368, 0.00441267, 0.06487442,
   #        -0.00489915, 0.99996105, 0.00734154,
   #        -0.06483950, -0.00764383, 0.99786643]
   # kalibr
   # data: [0.99998574, -0.00157912, 0.00510155, 0.00154415, 0.99997534, 0.00685068, -0.00511224, -0.0068427, 0.99996352]

LEFT.P:  !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   # euroc
   data: [435.2046959714599, 0, 367.4517211914062, 0,
          0, 435.2046959714599, 252.2008514404297, 0,
          0, 0, 1, 0]
   # autocal
   # data: [434.66482215,    0.0,          324.69445801,    0.0,
   #        0.0,             434.66482215, 252.39799881,    0.0,
   #        0.0,             0.0,          1.0,             0.0]
   # kalibr
   # data : [435.62391075, 0.0, 368.91822433, 0.0, 0.0, 435.62391075, 252.45542908, 0.0, 0.0, 0.0, 1.0, 0.0]


RIGHT.height: 480
RIGHT.width: 752
RIGHT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   # euroc
   data: [-0.28368365, 0.07451284, -0.00010473, -3.555907e-05, 0.0]
   # kalibr
   # data: [-0.286619726191, 0.0772774018918, 1.83275782075e-05, 2.48976074117e-05, 0]

RIGHT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   # euroc
   data: [457.587, 0.0, 379.999, 0.0, 456.134, 255.238, 0.0, 0.0, 1]
   # kalibr
   # data: [457.886744711, 0.0, 379.228746953, 0.0, 456.507889645, 255.64503621, 0.0, 0.0, 1.0]

RIGHT.R:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   # euroc
   data: [0.9999633526194376, -0.003625811871560086, 0.007755443660172947,
          0.003680398547259526, 0.9999684752771629, -0.007035845251224894,
          -0.007729688520722713, 0.007064130529506649, 0.999945173484644]
   # autocal
   # data: [0.99796372,  0.00265791,  0.06372874,
   #        -0.00217984,  0.99996897, -0.00757000,
   #        -0.06374689,  0.00741567,  0.99793855]
   # kalibr
   # data: [0.99998033 , -0.00368632, 0.0050751, 0.00372098,  0.9999697,  -0.00683731, -0.00504974,  0.00685606, 0.99996375]

RIGHT.P:  !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   # euroc
   data: [435.2046959714599, 0, 367.4517211914062, -47.90639384423901,
          0, 435.2046959714599, 252.2008514404297, 0,
          0, 0, 1, 0]
   # # autocal
   # data: [434.66482215, 0.0,          324.69445801, -48.36733066,
   #        0.0,          434.66482215, 252.39799881, 0.0,
   #        0.0,          0.0,          1.0,          0.0]
   # kalibr
   # data: [435.62391075, 0.0, 368.91822433, -47.91977452, 0.0, 435.62391075, 252.45542908, 0.0, 0.0, 0.0, 1.0, 0.0]

#--------------------------------------------------------------------------------------------
# ORB Parameters
#--------------------------------------------------------------------------------------------

# ORB Extractor: Number of features per image
ORBextractor.nFeatures: 1200

# ORB Extractor: Scale factor between levels in the scale pyramid
ORBextractor.scaleFactor: 1.2

# ORB Extractor: Number of levels in the scale pyramid
ORBextractor.nLevels: 8

# ORB Extractor: Fast threshold
# Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
# Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
# You can lower these values if your images have low contrast
ORBextractor.iniThFAST: 20
ORBextractor.minThFAST: 7

#--------------------------------------------------------------------------------------------
# Viewer Parameters
#--------------------------------------------------------------------------------------------
Viewer.KeyFrameSize: 0.05
Viewer.KeyFrameLineWidth: 1
Viewer.GraphLineWidth: 0.9
Viewer.PointSize: 2
Viewer.CameraSize: 0.08
Viewer.CameraLineWidth: 3
Viewer.ViewpointX: 0
Viewer.ViewpointY: -0.7
Viewer.ViewpointZ: -1.8
Viewer.ViewpointF: 500

