%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam;
imu: 1
num_of_cam: 2

imu_topic: "/imu0"
image0_topic: "/cam0/image_raw"
image1_topic: "/cam1/image_raw"
output_path: "/tmp"

cam0_calib: "euroc-cam0_pinhole.yaml"
cam1_calib: "euroc-cam1_pinhole.yaml"
image_width: 752
image_height: 480


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   # EuRoC calibration
   # data: [0.0148655429818, -0.999880929698, 0.00414029679422, -0.0216401454975,
   #        0.999557249008, 0.0149672133247, 0.025715529948,  -0.064676986768,
   #        -0.0257744366974, 0.00375618835797, 0.999660727178, 0.00981073058949,
   #        0, 0, 0, 1]

   # Our calibration (realtime -> batch)
   # data: [0.0150978375346138, -0.999878429084474, 0.00389645394452559, -0.0164955290793582,
   #        0.999644228600544, 0.0151797666729295, 0.0219315049501352, -0.0675743864860987,
   #        -0.0219879859787293, 0.00356394939902611, 0.999751882587515, 0.00565949229200543,
   #        0, 0, 0, 1]
   data: [0.0147195153346162, -0.999882380017966, 0.00430836371752421, -0.0167873405258514,
          0.999659425395356, 0.0148088219605378, 0.0214879503528683, -0.0666610093899547,
          -0.0215492247317679, 0.00399060418352593, 0.999759824153637, 0.0122683562073725,
          0, 0, 0, 1]

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   # EuRoC calibration
   # data: [0.0125552670891, -0.999755099723, 0.0182237714554, -0.0198435579556,
   #        0.999598781151, 0.0130119051815, 0.0251588363115, 0.0453689425024,
   #        -0.0253898008918, 0.0179005838253, 0.999517347078, 0.00786212447038,
   #        0, 0, 0, 1]

   # Our calibration (realtime -> batch)
   # data: [0.0127857559087361, -0.999749167027845, 0.0183882427918419, -0.0149523978983876,
   #        0.999690885021479, 0.0131728385311727, 0.0210857945073072, 0.0426539110958824,
   #        -0.0213227308479697, 0.018112960888854, 0.999608554283637, 0.00378174463840285,
   #        0, 0, 0, 1]
   data: [0.0123912474294644, -0.999746579071713, 0.0187945370134486, -0.0152819047538224,
          0.999705551322556, 0.0127785333405486, 0.0206281298359713, 0.0435913961168689,
          -0.020863068854006, 0.0185333947260772, 0.999610546982134, 0.0104368174469041,
          0, 0, 0, 1]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation.
gyr_n: 0.01         # gyroscope measurement noise standard deviation.
acc_w: 0.001        # accelerometer bias random work noise standard deviation.
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.
g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0
